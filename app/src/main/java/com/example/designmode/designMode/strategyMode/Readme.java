package com.example.designmode.designMode.strategyMode;

/**
 * 策略者模式：
 * 定义算法族，分别封装起来，让他们可以互相替换。
 * 算法族可理解为gameBoy中的一款游戏，用游戏卡把游戏封装起来，这样游
 * 戏就从游戏机中独立出来，然后你可以自己切换想要玩的游戏（换其他卡就
 * 行）。
 */

/**
 * 策略模式设计原则：
 * (1)在代码中把那些可能变化的地方分离开来，别让他和不变的代码混在一起
 * (2)针对接口编程，而不是针对实现编程
 * (3)多用组合，少用继承
 */

/**
 * 不能换卡的游戏机：
 * (1)先写一个抽象类(GamePlayModel)，抽象类中分别有game() 和 游戏机外观display()
 * (2)再写一个类继承自GamePlayModel, 分别复写game() 和 display() 和 startGame()
 * (3)游戏机生产成功，但是游戏机里只有一款游戏
 */

/**
 * 可以换卡的游戏机：
 * (1)先写一个接口接口里包含 game() 之后生产的所有游戏都需要实现这个接口（相当于游戏机的游戏卡插口）
 * (2)写一个abstract类，类中分别为display()外观 ,setGameBoyCard()用于插入游戏卡，
 * 和 startGame()
 * (3)写一个类来实现之前的game()所在的接口，用于生产游戏
 * (4)写一个类继承自游戏机抽象类，用于生产游戏
 * (5)卡与游戏机组合起来，生产成功
 */


